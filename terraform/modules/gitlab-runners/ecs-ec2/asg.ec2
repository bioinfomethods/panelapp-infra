resource "aws_autoscaling_group" "ecs_cluster" {
  count                = "${var.create_gitlab_runners ? 1 : 0}"
  name                 = "${var.stack}-gitlab-runners"
  vpc_zone_identifier  = ["${var.ecs_subnets}"]
  launch_configuration = "${aws_launch_configuration.ecs_cluster.name}"

  health_check_type = "EC2"

  max_size         = "${var.max_capacity}"
  min_size         = "${var.desired_capacity}"
  desired_capacity = "${var.desired_capacity}"

  tags = [
    {
      key                 = "Name"
      value               = "${var.stack}-gitlab-runners"
      propagate_at_launch = true
    },
    {
      key                 = "Stack"
      value               = "${var.stack}"
      propagate_at_launch = true
    },
    {
      key                 = "Env"
      value               = "${lookup(var.default_tags, "Env")}"
      propagate_at_launch = true
    },
    {
      key                 = "CostCode"
      value               = "${lookup(var.default_tags, "CostCode")}"
      propagate_at_launch = true
    },
  ]

  lifecycle {
    create_before_destroy = true
  }
}

resource "aws_autoscaling_policy" "ecs_cluster_scale_up" {
  count                  = "${var.create_gitlab_runners ? 1 : 0}"
  name                   = "${var.stack}_ecs_cluster_scale_up"
  scaling_adjustment     = 1
  adjustment_type        = "ChangeInCapacity"
  cooldown               = 300
  autoscaling_group_name = "${aws_autoscaling_group.ecs_cluster.name}"
}

resource "aws_autoscaling_policy" "ecs_cluster_scale_down" {
  count                  = "${var.create_gitlab_runners ? 1 : 0}"
  name                   = "${var.stack}_ecs_cluster_scale_down"
  scaling_adjustment     = -1
  adjustment_type        = "ChangeInCapacity"
  cooldown               = 300
  autoscaling_group_name = "${aws_autoscaling_group.ecs_cluster.name}"
}

resource "aws_cloudwatch_metric_alarm" "ecs_cluster_cpu" {
  count               = "${var.create_gitlab_runners ? 1 : 0}"
  alarm_name          = "ecs_cluster_cpu_reservaton"
  comparison_operator = "GreaterThanOrEqualToThreshold"
  evaluation_periods  = "1"
  metric_name         = "CPUReservation"
  namespace           = "AWS/ECS"
  period              = "60"
  statistic           = "Maximum"
  threshold           = "${var.scaling_cpu_threshold}"

  dimensions {
    ClusterName = "${var.stack}"
  }

  alarm_actions = ["${aws_autoscaling_policy.ecs_cluster_scale_up.arn}"]
  ok_actions    = ["${aws_autoscaling_policy.ecs_cluster_scale_down.arn}"]
}
