data "template_file" "user_data" {
  count = "${var.create_gitlab_runners ? 1 : 0}"

  vars {
    cluster_name = "${aws_ecs_cluster.gitlab_runners.name}"
    base_size    = "${var.container_base_size}"
  }

  template = <<USERDATA
#cloud-config
bootcmd:
 - cloud-init-per instance $(echo "ECS_CLUSTER=$${cluster_name}" >> /etc/ecs/ecs.config)
 - cloud-init-per instance $(echo "ECS_ENGINE_TASK_CLEANUP_WAIT_DURATION=5m" >> /etc/ecs/ecs.config)
USERDATA
}

resource "aws_launch_configuration" "ecs_cluster" {
  count         = "${var.create_gitlab_runners ? 1 : 0}"
  name_prefix   = "${var.stack}-cluster-"
  image_id      = "${data.aws_ami.amazon_ecs_ami.id}"
  instance_type = "${var.instance_type}"

  user_data = "${data.template_file.user_data.rendered}"

  security_groups = [
    "${aws_security_group.ecs_hosts.id}",
  ]

  iam_instance_profile = "${aws_iam_instance_profile.ecs_instance.id}"
  enable_monitoring    = true

  ebs_block_device {
    device_name = "/dev/xvdcz"
    volume_size = "${var.instance_volume_disk_size}"
  }

  lifecycle {
    create_before_destroy = true
  }
}

resource "aws_iam_instance_profile" "ecs_instance" {
  count = "${var.create_gitlab_runners ? 1 : 0}"
  name  = "${var.stack}-instance-${var.region}"
  role  = "${aws_iam_role.ecs_instance.name}"
}

resource "aws_iam_role" "ecs_instance" {
  count = "${var.create_gitlab_runners ? 1 : 0}"
  name  = "${var.stack}-instance-${var.region}"

  assume_role_policy = <<POLICY
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": "sts:AssumeRole",
      "Principal": {
        "Service": "ec2.amazonaws.com"
      },
      "Effect": "Allow",
      "Sid": ""
    }
  ]
}
POLICY
}

resource "aws_iam_role_policy" "ecs_instance" {
  count = "${var.create_gitlab_runners ? 1 : 0}"
  name  = "${var.stack}-instance-${var.region}"
  role  = "${aws_iam_role.ecs_instance.id}"

  policy = <<POLICY
{
     "Version": "2012-10-17",
     "Statement": [
       {
          "Effect": "Allow",
          "Action": [
            "ecs:DeregisterContainerInstance",
            "ecs:DiscoverPollEndpoint",
            "ecs:Poll",
            "ecs:RegisterContainerInstance",
            "ecs:StartTelemetrySession",
            "ecs:Submit*",
            "ecr:GetAuthorizationToken",
            "ecr:BatchCheckLayerAvailability",
            "ecr:GetDownloadUrlForLayer",
            "ecr:BatchGetImage",
            "logs:CreateLogStream",
            "logs:PutLogEvents"
          ],
          "Resource": "*"
       }
    ]
}
POLICY
}

resource "aws_security_group" "ecs_hosts" {
  count       = "${var.create_gitlab_runners ? 1 : 0}"
  name        = "ecs-hosts"
  description = "default group for ecs container instaces"
  vpc_id      = "${var.vpc_id}"

  lifecycle {
    create_before_destroy = true
  }

  tags = "${merge(var.default_tags, map("Name", "ecs-hosts"))}"
}

resource "aws_security_group_rule" "ecs_ingress" {
  count             = "${var.create_gitlab_runners ? 1 : 0}"
  type              = "ingress"
  from_port         = 0
  to_port           = 0
  protocol          = "all"
  self              = true
  security_group_id = "${aws_security_group.ecs_hosts.id}"
}

resource "aws_security_group_rule" "ecs_egress" {
  count             = "${var.create_gitlab_runners ? 1 : 0}"
  type              = "egress"
  from_port         = 0
  to_port           = 0
  protocol          = "all"
  cidr_blocks       = ["0.0.0.0/0"]
  security_group_id = "${aws_security_group.ecs_hosts.id}"
}

resource "aws_security_group_rule" "ecs_ipv6_egress" {
  count             = "${var.create_gitlab_runners ? 1 : 0}"
  type              = "egress"
  from_port         = 0
  to_port           = 0
  protocol          = "all"
  ipv6_cidr_blocks  = ["::/0"]
  security_group_id = "${aws_security_group.ecs_hosts.id}"
}
